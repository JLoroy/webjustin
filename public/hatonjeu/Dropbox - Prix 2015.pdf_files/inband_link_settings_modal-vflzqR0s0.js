// Generated by CoffeeScript 1.7.1
define(['external/react', 'modules/clean/ajax', 'modules/clean/css', 'modules/clean/em_string', 'modules/clean/filepath', 'modules/clean/form', 'modules/clean/react/button', 'modules/clean/react/modal', 'modules/clean/static_urls', 'modules/core/i18n', 'modules/core/notify'], function(React, Ajax, Css, Emstring, FilePath, Form, Button, _arg, _arg1, _arg2, Notify) {
  var InBandLinkSettingsModal, Modal, SettingValues, ce, d, static_url, _;
  Modal = _arg.Modal;
  static_url = _arg1.static_url;
  _ = _arg2._;
  ce = React.createElement;
  d = React.DOM;
  SettingValues = {
    ALL: 'all',
    INVITED: 'invited',
    TEAM: 'team'
  };
  InBandLinkSettingsModal = React.createClass({
    statics: {
      showInstance: function(inBandLinkSettingsModalContent) {
        return Modal.showInstance(inBandLinkSettingsModalContent);
      }
    },
    propTypes: {
      user: React.PropTypes.object.isRequired,
      fqPath: React.PropTypes.string.isRequired,
      teamName: React.PropTypes.string.isRequired
    },
    getInitialState: function() {
      return {
        hasLoaded: false
      };
    },
    componentWillMount: function() {
      Css.require_css('/static/css/sharing_settings_modal-vflDJTv0k.css');
      return Ajax.WebRequest({
        subject_user: this.props.user,
        url: '/simple_sharing_ajax/get_member_link_settings',
        data: {
          fq_path: this.props.fqPath
        },
        success: (function(_this) {
          return function(responseText) {
            var res;
            if (!_this.isMounted()) {
              return;
            }
            res = JSON.parse(responseText);
            return _this.setState({
              hasLoaded: true,
              keyToRecipients: res.key_to_recipients,
              memberOnly: res.member_only
            });
          };
        })(this),
        error: (function(_this) {
          return function(xhr, status, error_string) {
            if (!_this.isMounted()) {
              return;
            }
            return _this.refs['modal'].close();
          };
        })(this)
      });
    },
    render: function() {
      var snippetted_filename;
      snippetted_filename = Emstring.em_snippet(FilePath.filename(this.props.fqPath), 16);
      return ce(Modal, {
        acceptButtonText: _("Save settings"),
        autoClose: false,
        dismissButtonText: _("Cancel"),
        onAccept: this._onSave,
        onDismiss: this._onCancel,
        ref: 'modal',
        title: _("\u2018%(filename)s\u2019 settings").format({
          filename: snippetted_filename
        })
      }, !this.state.hasLoaded ? this._renderLoadingSpinner() : d.div({
        className: 'sharing-settings-modal-content'
      }, d.table({
        className: 'permission-settings-table'
      }, d.tr({
        className: 'audience-selection'
      }, d.td({
        className: 'prompt'
      }, _("Who can be invited to view this folder?")), d.td({}, this._renderOption('audience-all', SettingValues.ALL, _("Anyone")), this._renderOption('audience-invited', SettingValues.INVITED, _("People you\u2019ve explicitly invited")), this._renderOption('audience-team', SettingValues.TEAM, _("People at %(team)s").format({
        team: this.props.teamName || "your team"
      })))))));
    },
    _renderLoadingSpinner: function() {
      return d.div({
        className: 'member-container spinner-div'
      }, d.img({
        className: 'member-loading-spinner',
        src: static_url('/static/images/icons/ajax-loading-small-vfl3Wt7C_.gif')
      }));
    },
    _renderOption: function(id, value, text) {
      return d.div({
        className: 'option'
      }, d.input({
        checked: this._mapSettingsToLocal() === value,
        className: 'audience-input',
        id: id,
        name: 'audience',
        onChange: this._handleOptionChanged,
        type: 'radio',
        value: value
      }), d.label({
        className: 'audience-label',
        htmlFor: id
      }, text));
    },
    _onCancel: function() {
      return this.refs['modal'].close();
    },
    _onSave: function() {
      return Ajax.WebRequest({
        subject_user: this.props.user,
        url: '/simple_sharing_ajax/set_member_link_settings',
        data: {
          fq_path: this.props.fqPath,
          key_to_recipients: this.state.keyToRecipients,
          member_only: this.state.memberOnly
        },
        success: (function(_this) {
          return function(resp) {
            var msg, success, _ref;
            _ref = Form.parse_response(resp), success = _ref[0], msg = _ref[1];
            if (success) {
              Notify.success(_("Settings updated."));
              return _this.refs['modal'].close();
            } else {
              return Notify.error(msg);
            }
          };
        })(this)
      });
    },
    _handleOptionChanged: function(e) {
      return this.setState({
        keyToRecipients: e.currentTarget.value === SettingValues.INVITED,
        memberOnly: e.currentTarget.value === SettingValues.TEAM
      });
    },
    _mapSettingsToLocal: function() {
      if (this.state.keyToRecipients) {
        return SettingValues.INVITED;
      } else if (this.state.memberOnly) {
        return SettingValues.TEAM;
      } else {
        return SettingValues.ALL;
      }
    }
  });
  return InBandLinkSettingsModal;
});

//# sourceMappingURL=inband_link_settings_modal.map
