// Generated by CoffeeScript 1.7.1
define(['external/lru', 'external/rsvp', 'modules/clean/ajax', 'modules/clean/activity/activity', 'modules/clean/activity/activity_store'], function(LRUCache, _arg, ajax, Activity, _arg1) {
  var FileActivityCache, FileActivityStore, Promise;
  Promise = _arg.Promise;
  FileActivityStore = _arg1.FileActivityStore;
  FileActivityCache = (function() {
    FileActivityCache.CACHE_SIZE = 20;

    FileActivityCache.ACTIVITY_TYPE = Activity.ActivityType.FILE;

    FileActivityCache.FETCH_ACTIVITY_BATCH_URL = '/file_activity/file_activity_batch';

    function FileActivityCache(limit) {
      if (limit == null) {
        limit = FileActivityCache.CACHE_SIZE;
      }
      this._cache = new LRUCache(limit);
    }

    FileActivityCache.prototype.getActivity = function(activityContext, activityContextData) {
      return this._getFromCache(activityContext, activityContextData);
    };

    FileActivityCache.prototype.setActivity = function(activityContext, activityContextData, activity) {
      return this._putIntoCache(activityContext, activityContextData, activity);
    };

    FileActivityCache.prototype.fetchActivities = function(userId, activityContext, activityContextDataBatch, oref) {
      var ctxDataBatch;
      ctxDataBatch = activityContextDataBatch.filter((function(_this) {
        return function(ctxData) {
          return _this._findInCache(activityContext, ctxData) == null;
        };
      })(this));
      if (!(ctxDataBatch.length > 0)) {
        return Promise.resolve();
      }
      return new FileActivityStore().fetchActivities(userId, activityContext, ctxDataBatch, oref).then(this._parseActivities).then((function(_this) {
        return function(activityByCtxData) {
          var activity, ctxData;
          for (ctxData in activityByCtxData) {
            activity = activityByCtxData[ctxData];
            _this._putIntoCache(activityContext, ctxData, activity);
          }
        };
      })(this));
    };

    FileActivityCache.prototype._parseActivities = function(response) {
      response = JSON.parse(response);
      return (new FileActivityStore()).genActivitiesFromMap(response);
    };

    FileActivityCache.prototype._keyFrom = function(ctx, ctxData) {
      return "" + ctx + ":" + ctxData;
    };

    FileActivityCache.prototype._findInCache = function(ctx, ctxData) {
      return this._cache.find(this._keyFrom(ctx, ctxData));
    };

    FileActivityCache.prototype._getFromCache = function(ctx, ctxData) {
      return this._cache.get(this._keyFrom(ctx, ctxData));
    };

    FileActivityCache.prototype._putIntoCache = function(ctx, ctxData, val) {
      this._cache.put(this._keyFrom(ctx, ctxData), val);
    };

    return FileActivityCache;

  })();
  return FileActivityCache;
});

//# sourceMappingURL=file_activity_cache.map
